#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from os import path
from functools import partial
import sixleds
import wx
import wx.adv
import logging
import time


class sixledsCharWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        super(sixledsCharWindow, self).__init__(*args, **kwargs)
        self.parent = self.GetParent()
        self.InitUI()

    def InitUI(self):
        # Window Content
        splitter = wx.SplitterWindow(self)
        leftP = wx.Panel(splitter)
        rightP = wx.Panel(splitter)

        self.listBox = wx.ListBox(leftP, wx.ID_ANY, style=wx.LB_SINGLE)
        self.listBox.SetFont(wx.Font(14, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
        displayItems = []
        for key, value in sixleds.opage.ttable.items():
            displayItems.append(chr(key))
        self.listBox.InsertItems(displayItems, 0)
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.listBox, 1, wx.ALL|wx.EXPAND, 5)
        leftP.SetSizer(sizer)

        self.button = wx.Button(rightP, wx.ID_ANY, "Insert")
        self.Bind(wx.EVT_BUTTON, self.OnClickInsert, self.button)
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.button, 1, wx.ALL|wx.EXPAND, 5)
        rightP.SetSizer(sizer)

        splitter.SplitVertically(leftP, rightP)
        splitter.SetSashGravity(0.8)
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(splitter, 1, wx.EXPAND)
        self.SetSizer(sizer)

        # Window Settings
        self.SetIcon(self.parent.icon)
        self.SetSize(400, 390)
        self.SetMinSize((400, 390))
        self.SetTitle("Insert Special Char")
        self.Centre()

    def OnClickInsert(self, e):
        listBoxText = self.listBox.GetString(self.listBox.GetSelection())
        self.parent.textField.WriteText(sixleds.opage.ttable.get(ord(listBoxText), ""))

class sixledsMainWindow(wx.Frame):
    PRODUCT_NAME = "sixleds GUI"
    PRODUCT_VERSION = "0.4.0"
    PRODUCT_ICON = '/usr/share/pixmaps/sixleds.png'

    PAGES = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
    GRAPHICS = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P"]

    serialPort = "/dev/ttyUSB0"
    sixledsConfigFile = "~/.sixleds"
    deviceId = 0

    page = "A"
    line = "1"
    leadingFx = "E"
    speed = 2
    displayFx = "A"
    displayMethod = "Q" # calculated from speed and displayFx
    waitTime = "A"
    laggingFx = "E"

    def __init__(self, *args, **kwargs):
        super(sixledsMainWindow, self).__init__(*args, **kwargs)
        self.SetupConnection(message=False)
        self.InitUI()

    def InitUI(self):
        # Menubar
        menubar = wx.MenuBar()
        self.SetMenuBar(menubar)

        # File Menu
        fileMenu = wx.Menu()
        menubar.Append(fileMenu, '&File')
        self.Bind(wx.EVT_MENU, self.OnSelectSerialPort, fileMenu.Append(wx.ID_OPEN, '&Select Serial Port'))
        fileMenu.AppendSeparator()
        fileMenuSend = wx.MenuItem(fileMenu, wx.ID_ANY, '&Send Page\tCtrl+S')
        fileMenuSend.SetBitmap(wx.ArtProvider.GetBitmap(wx.ART_TICK_MARK, wx.ART_MENU))
        self.Bind(wx.EVT_MENU, self.OnSendPage, fileMenu.Append(fileMenuSend))
        fileMenu.AppendSeparator()
        self.Bind(wx.EVT_MENU, self.OnQuit, fileMenu.Append(wx.ID_EXIT, 'Quit', 'Quit application'))

        # Edit Menu
        editMenu = wx.Menu()
        menubar.Append(editMenu, '&Edit')
        self.Bind(wx.EVT_MENU, self.OnCut, editMenu.Append(wx.ID_CUT, '&Cut'))
        self.Bind(wx.EVT_MENU, self.OnCopy, editMenu.Append(wx.ID_COPY, '&Copy'))
        self.Bind(wx.EVT_MENU, self.OnPaste, editMenu.Append(wx.ID_PASTE, '&Paste'))
        self.Bind(wx.EVT_MENU, self.OnDelete, editMenu.Append(wx.ID_DELETE, '&Delete'))

        # Commands Leading Effect Menu
        leadingEffectMenu = wx.Menu()
        self.btnLeadingFxImmediate = leadingEffectMenu.Append(wx.ID_ANY, 'Immediate', kind=wx.ITEM_CHECK)
        self.btnLeadingFxXopen = leadingEffectMenu.Append(wx.ID_ANY, 'Xopen', kind=wx.ITEM_CHECK)
        self.btnLeadingFxCurtainUp = leadingEffectMenu.Append(wx.ID_ANY, 'Curtain Up', kind=wx.ITEM_CHECK)
        self.btnLeadingFxCurtainDown = leadingEffectMenu.Append(wx.ID_ANY, 'Curtain Down', kind=wx.ITEM_CHECK)
        self.btnLeadingFxScrollLeft = leadingEffectMenu.Append(wx.ID_ANY, 'Scroll Left', kind=wx.ITEM_CHECK)
        self.btnLeadingFxScrollRight = leadingEffectMenu.Append(wx.ID_ANY, 'Scroll Right', kind=wx.ITEM_CHECK)
        self.btnLeadingFxVopen = leadingEffectMenu.Append(wx.ID_ANY, 'Vopen', kind=wx.ITEM_CHECK)
        self.btnLeadingFxVclose = leadingEffectMenu.Append(wx.ID_ANY, 'Vclose', kind=wx.ITEM_CHECK)
        self.btnLeadingFxScrollUp = leadingEffectMenu.Append(wx.ID_ANY, 'Scroll Up', kind=wx.ITEM_CHECK)
        self.btnLeadingFxScrollDown = leadingEffectMenu.Append(wx.ID_ANY, 'Scroll Down', kind=wx.ITEM_CHECK)
        self.btnLeadingFxHold = leadingEffectMenu.Append(wx.ID_ANY, 'Hold', kind=wx.ITEM_CHECK)
        self.btnLeadingFxSnow = leadingEffectMenu.Append(wx.ID_ANY, 'Snow', kind=wx.ITEM_CHECK)
        self.btnLeadingFxTwinkle = leadingEffectMenu.Append(wx.ID_ANY, 'Twinkle', kind=wx.ITEM_CHECK)
        self.btnLeadingFxBlockMove = leadingEffectMenu.Append(wx.ID_ANY, 'Block Move', kind=wx.ITEM_CHECK)
        self.btnLeadingFxRandom = leadingEffectMenu.Append(wx.ID_ANY, 'Random', kind=wx.ITEM_CHECK)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'A', self.btnLeadingFxImmediate), self.btnLeadingFxImmediate)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'B', self.btnLeadingFxXopen), self.btnLeadingFxXopen)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'C', self.btnLeadingFxCurtainUp), self.btnLeadingFxCurtainUp)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'D', self.btnLeadingFxCurtainDown), self.btnLeadingFxCurtainDown)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'E', self.btnLeadingFxScrollLeft), self.btnLeadingFxScrollLeft)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'F', self.btnLeadingFxScrollRight), self.btnLeadingFxScrollRight)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'G', self.btnLeadingFxVopen), self.btnLeadingFxVopen)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'H', self.btnLeadingFxVclose), self.btnLeadingFxVclose)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'I', self.btnLeadingFxScrollUp), self.btnLeadingFxScrollUp)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'J', self.btnLeadingFxScrollDown), self.btnLeadingFxScrollDown)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'K', self.btnLeadingFxHold), self.btnLeadingFxHold)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'L', self.btnLeadingFxSnow), self.btnLeadingFxSnow)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'M', self.btnLeadingFxTwinkle), self.btnLeadingFxTwinkle)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'N', self.btnLeadingFxBlockMove), self.btnLeadingFxBlockMove)
        self.Bind(wx.EVT_MENU, partial(self.OnSetLeadingFx, 'P', self.btnLeadingFxRandom), self.btnLeadingFxRandom)

        # Commands Speed Menu
        speedMenu = wx.Menu()
        self.btnSpeed1 = speedMenu.Append(wx.ID_ANY, '1 Slow', kind=wx.ITEM_CHECK)
        self.btnSpeed2 = speedMenu.Append(wx.ID_ANY, '2', kind=wx.ITEM_CHECK)
        self.btnSpeed3 = speedMenu.Append(wx.ID_ANY, '3', kind=wx.ITEM_CHECK)
        self.btnSpeed4 = speedMenu.Append(wx.ID_ANY, '4 Fast', kind=wx.ITEM_CHECK)
        self.Bind(wx.EVT_MENU, partial(self.OnSetSpeed, 4, self.btnSpeed1), self.btnSpeed1)
        self.Bind(wx.EVT_MENU, partial(self.OnSetSpeed, 3, self.btnSpeed2), self.btnSpeed2)
        self.Bind(wx.EVT_MENU, partial(self.OnSetSpeed, 2, self.btnSpeed3), self.btnSpeed3)
        self.Bind(wx.EVT_MENU, partial(self.OnSetSpeed, 1, self.btnSpeed4), self.btnSpeed4)

        # Commands Display Effect Menu
        displayEffectMenu = wx.Menu()
        self.btnDisplayFxNormal = displayEffectMenu.Append(wx.ID_ANY, 'Normal', kind=wx.ITEM_CHECK)
        self.btnDisplayFxBlinking = displayEffectMenu.Append(wx.ID_ANY, 'Blinking', kind=wx.ITEM_CHECK)
        self.btnDisplayFxSong1 = displayEffectMenu.Append(wx.ID_ANY, 'Song 1', kind=wx.ITEM_CHECK)
        self.btnDisplayFxSong2 = displayEffectMenu.Append(wx.ID_ANY, 'Song 2', kind=wx.ITEM_CHECK)
        self.btnDisplayFxSong3 = displayEffectMenu.Append(wx.ID_ANY, 'Song 3', kind=wx.ITEM_CHECK)
        self.Bind(wx.EVT_MENU, partial(self.OnSetDisplayFx, 'A', self.btnDisplayFxNormal), self.btnDisplayFxNormal)
        self.Bind(wx.EVT_MENU, partial(self.OnSetDisplayFx, 'B', self.btnDisplayFxBlinking), self.btnDisplayFxBlinking)
        self.Bind(wx.EVT_MENU, partial(self.OnSetDisplayFx, 'C', self.btnDisplayFxSong1), self.btnDisplayFxSong1)
        self.Bind(wx.EVT_MENU, partial(self.OnSetDisplayFx, 'D', self.btnDisplayFxSong2), self.btnDisplayFxSong2)
        self.Bind(wx.EVT_MENU, partial(self.OnSetDisplayFx, 'E', self.btnDisplayFxSong3), self.btnDisplayFxSong3)

        # Commands Special Funtion Menu
        specialFuntionMenu = wx.Menu()
        self.btnSpecialFxBell = specialFuntionMenu.Append(wx.ID_ANY, 'Bell')
        self.btnSpecialFxDate = specialFuntionMenu.Append(wx.ID_ANY, 'Date')
        self.btnSpecialFxTime = specialFuntionMenu.Append(wx.ID_ANY, 'Time')
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<BA>'), self.btnSpecialFxBell)
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<KD>'), self.btnSpecialFxDate)
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<KT>'), self.btnSpecialFxTime)

        # Commands Closing Effect Menu
        closingEffectMenu = wx.Menu()
        self.btnClosingFxImmediate = closingEffectMenu.Append(wx.ID_ANY, 'Immediate', kind=wx.ITEM_CHECK)
        self.btnClosingFxXopen = closingEffectMenu.Append(wx.ID_ANY, 'Xopen', kind=wx.ITEM_CHECK)
        self.btnClosingFxCurtainUp = closingEffectMenu.Append(wx.ID_ANY, 'Curtain Up', kind=wx.ITEM_CHECK)
        self.btnClosingFxCurtainDown = closingEffectMenu.Append(wx.ID_ANY, 'Curtain Down', kind=wx.ITEM_CHECK)
        self.btnClosingFxScrollLeft = closingEffectMenu.Append(wx.ID_ANY, 'Scroll Left', kind=wx.ITEM_CHECK)
        self.btnClosingFxScrollRight = closingEffectMenu.Append(wx.ID_ANY, 'Scroll Right', kind=wx.ITEM_CHECK)
        self.btnClosingFxVopen = closingEffectMenu.Append(wx.ID_ANY, 'Vopen', kind=wx.ITEM_CHECK)
        self.btnClosingFxVclose = closingEffectMenu.Append(wx.ID_ANY, 'Vclose', kind=wx.ITEM_CHECK)
        self.btnClosingFxScrollUp = closingEffectMenu.Append(wx.ID_ANY, 'Scroll Up', kind=wx.ITEM_CHECK)
        self.btnClosingFxScrollDown = closingEffectMenu.Append(wx.ID_ANY, 'Scroll Down', kind=wx.ITEM_CHECK)
        self.btnClosingFxHold = closingEffectMenu.Append(wx.ID_ANY, 'Hold', kind=wx.ITEM_CHECK)
        self.Bind(wx.EVT_MENU, partial(self.OnSetClosingFx, 'A', self.btnClosingFxImmediate), self.btnClosingFxImmediate)
        self.Bind(wx.EVT_MENU, partial(self.OnSetClosingFx, 'B', self.btnClosingFxXopen), self.btnClosingFxXopen)
        self.Bind(wx.EVT_MENU, partial(self.OnSetClosingFx, 'C', self.btnClosingFxCurtainUp), self.btnClosingFxCurtainUp)
        self.Bind(wx.EVT_MENU, partial(self.OnSetClosingFx, 'D', self.btnClosingFxCurtainDown), self.btnClosingFxCurtainDown)
        self.Bind(wx.EVT_MENU, partial(self.OnSetClosingFx, 'E', self.btnClosingFxScrollLeft), self.btnClosingFxScrollLeft)
        self.Bind(wx.EVT_MENU, partial(self.OnSetClosingFx, 'F', self.btnClosingFxScrollRight), self.btnClosingFxScrollRight)
        self.Bind(wx.EVT_MENU, partial(self.OnSetClosingFx, 'G', self.btnClosingFxVopen), self.btnClosingFxVopen)
        self.Bind(wx.EVT_MENU, partial(self.OnSetClosingFx, 'H', self.btnClosingFxVclose), self.btnClosingFxVclose)
        self.Bind(wx.EVT_MENU, partial(self.OnSetClosingFx, 'I', self.btnClosingFxScrollUp), self.btnClosingFxScrollUp)
        self.Bind(wx.EVT_MENU, partial(self.OnSetClosingFx, 'J', self.btnClosingFxScrollDown), self.btnClosingFxScrollDown)
        self.Bind(wx.EVT_MENU, partial(self.OnSetClosingFx, 'K', self.btnClosingFxHold), self.btnClosingFxHold)

        # Commands Font Menu
        fontMenu = wx.Menu()
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<AA>'), fontMenu.Append(wx.ID_ANY, '4x7 (narrow size)'))
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<AC>'), fontMenu.Append(wx.ID_ANY, '5x7 (normal size)'))
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<AB>'), fontMenu.Append(wx.ID_ANY, '6x7 (bold size)'))
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<AD>'), fontMenu.Append(wx.ID_ANY, '7x13 (large size)'))
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<AE>'), fontMenu.Append(wx.ID_ANY, '5x8 (long size)'))

        # Commands Color Menu
        colorMenu = wx.Menu()
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<CB>'), colorMenu.Append(wx.ID_ANY, 'Red'))
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<CE>'), colorMenu.Append(wx.ID_ANY, 'Green'))
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<CH>'), colorMenu.Append(wx.ID_ANY, 'Orange'))
        colorMenu.AppendSeparator()
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<CL>'), colorMenu.Append(wx.ID_ANY, 'Inversed Red'))
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<CM>'), colorMenu.Append(wx.ID_ANY, 'Inversed Green'))
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<CN>'), colorMenu.Append(wx.ID_ANY, 'Inversed Orange'))
        colorMenu.AppendSeparator()
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<CP>'), colorMenu.Append(wx.ID_ANY, 'Red On Green'))
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<CQ>'), colorMenu.Append(wx.ID_ANY, 'Green On Red'))
        colorMenu.AppendSeparator()
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<CR>'), colorMenu.Append(wx.ID_ANY, 'RYG'))
        self.Bind(wx.EVT_MENU, partial(self.OnInsertCmd, '<CS>'), colorMenu.Append(wx.ID_ANY, 'Rainbow'))

        # Commands Menu
        commandsMenu = wx.Menu()
        menubar.Append(commandsMenu, '&Commands')
        commandsMenu.Append(wx.ID_ANY, '&Leading Effect', leadingEffectMenu)
        commandsMenu.Append(wx.ID_ANY, '&Move Speed', speedMenu)
        commandsMenu.Append(wx.ID_ANY, '&Display Effect', displayEffectMenu)
        self.Bind(wx.EVT_MENU, self.OnSetDisplayTime, commandsMenu.Append(wx.ID_ANY, '&Display Time...'))
        commandsMenu.Append(wx.ID_ANY, '&Closing Effect', closingEffectMenu)
        commandsMenu.AppendSeparator()
        commandsMenu.Append(wx.ID_ANY, '&Font', fontMenu)
        commandsMenu.Append(wx.ID_ANY, '&Color', colorMenu)
        commandsMenu.AppendSeparator()
        commandsMenu.Append(wx.ID_ANY, 'Insert &Special Function', specialFuntionMenu)
        self.Bind(wx.EVT_MENU, self.OnInsertSpecialChar, commandsMenu.Append(wx.ID_ANY, 'Insert Special &Char...'))
        self.Bind(wx.EVT_MENU, self.OnInsertGraphic, commandsMenu.Append(wx.ID_ANY, 'Insert &Graphic...'))
        commandsMenu.AppendSeparator()
        self.Bind(wx.EVT_MENU, self.OnProgramGraphic, commandsMenu.Append(wx.ID_ANY, 'Program &Graphic From File...'))

        # Functions Menu
        functionsMenu = wx.Menu()
        menubar.Append(functionsMenu, '&Functions')
        self.Bind(wx.EVT_MENU, self.OnSendMessage, functionsMenu.Append(wx.ID_ANY, '&Send Raw Command...'))
        self.Bind(wx.EVT_MENU, self.OnSetDefaultRunPage, functionsMenu.Append(wx.ID_ANY, '&Set Default Run Page...'))
        functionsMenu.AppendSeparator()
        self.Bind(wx.EVT_MENU, self.OnSetId, functionsMenu.Append(wx.ID_ANY, '&Set ID...'))
        self.Bind(wx.EVT_MENU, self.OnSetClock, functionsMenu.Append(wx.ID_ANY, '&Set Clock'))
        self.Bind(wx.EVT_MENU, self.OnSetBrightness, functionsMenu.Append(wx.ID_ANY, '&Set Brightness...'))
        self.Bind(wx.EVT_MENU, self.OnSetSchedule, functionsMenu.Append(wx.ID_ANY, '&Set Schedule...'))
        functionsMenu.AppendSeparator()
        self.Bind(wx.EVT_MENU, self.OnFactoryReset, functionsMenu.Append(wx.ID_ANY, '&Delete All Content (Factory Reset)'))

        # Help Menu
        helpMenu = wx.Menu()
        menubar.Append(helpMenu, '&Help')
        self.Bind(wx.EVT_MENU, self.OnOpenReadme, helpMenu.Append(wx.ID_HELP, '&Read Me'))
        self.Bind(wx.EVT_MENU, self.OnOpenAboutDialog, helpMenu.Append(wx.ID_ABOUT, '&About...'))

        # Toolbar
        iconSize = (24,24)
        toolbar = self.CreateToolBar()
        qtool = toolbar.AddTool(wx.ID_ANY, 'Send', wx.ArtProvider.GetBitmap(wx.ART_TICK_MARK, wx.ART_TOOLBAR, iconSize))
        self.Bind(wx.EVT_TOOL, self.OnSendPage, qtool)
        toolbar.Realize()

        # Window Content
        splitter = wx.SplitterWindow(self)
        leftP = wx.Panel(splitter)
        rightP = wx.Panel(splitter)

        self.listBox = wx.ListBox(leftP, wx.ID_ANY, style=wx.LB_SINGLE)
        self.listBox.Bind(wx.EVT_LISTBOX, self.OnPageChanged)
        self.listBox.InsertItems(self.PAGES, 0)
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.listBox, 1, wx.ALL|wx.EXPAND, 5)
        leftP.SetSizer(sizer)

        self.textField = wx.TextCtrl(rightP, wx.ID_ANY, style=wx.TE_MULTILINE|wx.HSCROLL)
        self.textField.Bind(wx.EVT_TEXT, self.OnTextChanged)
        self.textField.SetFont(wx.Font(12, wx.FONTFAMILY_MODERN, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL))
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.textField, 1, wx.ALL|wx.EXPAND, 5)
        rightP.SetSizer(sizer)

        splitter.SplitVertically(leftP, rightP)
        splitter.SetSashGravity(0.2)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(splitter, 1, wx.EXPAND)
        self.SetSizer(sizer)

        self.statusBar = self.CreateStatusBar(1)
        self.OnTextChanged(None)

        # Window Settings
        if(path.exists(self.PRODUCT_ICON)):
            self.icon = wx.Icon(self.PRODUCT_ICON, wx.BITMAP_TYPE_PNG)
            self.SetIcon(self.icon)
        self.SetSize(500, 390)
        self.SetMinSize((500, 390))
        self.SetCustomTitle()
        self.Centre()

    def SetCustomTitle(self):
        self.SetTitle(self.PRODUCT_NAME+" ("+self.serialPort+", Device "+str(self.deviceId)+", Page "+self.page+")")

    def OnOpenReadme(self, e):
        print(e)

    def OnOpenAboutDialog(self, e):
        info = wx.adv.AboutDialogInfo()
        if(self.icon != None):
            info.SetIcon(self.icon)
        info.SetName(self.PRODUCT_NAME)
        info.SetVersion(self.PRODUCT_VERSION)
        info.SetDescription(
            """LED Display Control Library, Command Line Utility and Graphical User Interface (GUI)."""
            """\n"""
            """This library was made for providing Linux support for the following devices: Maplin N00GA - using the AM004-03128/03127 LED Display communication board, Velleman MML16CN, MML16R, MML24CN, McCrypt LED Light Writing 590996 (the Conrad Laufschrift)"""
        )
        info.SetCopyright('© 2020 Georg Sieber')
        info.SetWebSite('https://github.com/schorschii/sixleds')
        info.SetLicence('GNU General Public License v3.0')
        info.AddDeveloper('Georg Sieber (Further Development & GUI) https://github.com/schorschii')
        info.AddDeveloper('hackerdeen: Midder-57N & pisuke (Base Code) https://github.com/hackerdeen')
        #info.AddDocWriter('Georg Sieber')
        #info.AddArtist('Georg Sieber')
        #info.AddTranslator('Georg Sieber')
        wx.adv.AboutBox(info, parent=self)

    def OnInsertSpecialChar(self, e):
        window = sixledsCharWindow(self)
        window.Show()

    def OnInsertGraphic(self, e):
        dlg = wx.TextEntryDialog(self, "Enter graphic to insert (A..P)", self.PRODUCT_NAME, "A")
        if(dlg.ShowModal() != wx.ID_OK): return
        result = dlg.GetValue()
        if(result not in self.GRAPHICS):
            wx.MessageBox("Invalid input", "Error", wx.ICON_ERROR | wx.OK, self)
            return
        self.textField.WriteText("<G"+result+"1>")

    def OnProgramGraphic(self, e):
        fileDialog = wx.FileDialog(self,
            "Choose Graphic File", wildcard="Text Files (*.txt)|*.txt",
            style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST
        )
        if(fileDialog.ShowModal() == wx.ID_CANCEL): return

        dlg = wx.TextEntryDialog(self, "Please specify graphic which should be overwritten on device (A..P)", self.PRODUCT_NAME, "A")
        if(dlg.ShowModal() != wx.ID_OK): return
        graphicid = dlg.GetValue()
        if(graphicid not in self.GRAPHICS):
            wx.MessageBox("Invalid input", "Error", wx.ICON_ERROR | wx.OK, self)
            return

        # read file content
        file = open(fileDialog.GetPath(), "r")
        content = file.read().splitlines()
        file.close()

        # send graphic to device
        self.ld.programgraphic(graphicid, content)

    def OnTextChanged(self, e):
        self.statusBar.SetStatusText("Chars: "+str(len(self.textField.GetValue())))

    def OnPageChanged(self, e):
        self.page = self.PAGES[self.listBox.GetSelection()]
        self.SetCustomTitle()
        value = self.ld.getline(self.page)
        if(value != None):
            self.textField.SetValue(value.MM)

            self.leadingFx = value.FX
            self.DeselectLeadingFx()
            if(value.FX == 'A'): self.btnLeadingFxImmediate.Check(True)
            elif(value.FX == 'B'): self.btnLeadingFxXopen.Check(True)
            elif(value.FX == 'C'): self.btnLeadingFxCurtainUp.Check(True)
            elif(value.FX == 'D'): self.btnLeadingFxCurtainDown.Check(True)
            elif(value.FX == 'E'): self.btnLeadingFxScrollLeft.Check(True)
            elif(value.FX == 'F'): self.btnLeadingFxScrollRight.Check(True)
            elif(value.FX == 'G'): self.btnLeadingFxVopen.Check(True)
            elif(value.FX == 'H'): self.btnLeadingFxVclose.Check(True)
            elif(value.FX == 'I'): self.btnLeadingFxScrollUp.Check(True)
            elif(value.FX == 'J'): self.btnLeadingFxScrollDown.Check(True)
            elif(value.FX == 'K'): self.btnLeadingFxHold.Check(True)
            elif(value.FX == 'L'): self.btnLeadingFxSnow.Check(True)
            elif(value.FX == 'M'): self.btnLeadingFxTwinkle.Check(True)
            elif(value.FX == 'N'): self.btnLeadingFxBlockMove.Check(True)
            elif(value.FX == 'P'): self.btnLeadingFxRandom.Check(True)

            self.DeselectDisplayFx()
            self.DeselectSpeed()
            if(value.MX == 'A'):
                self.btnSpeed4.Check(True); self.btnDisplayFxNormal.Check(True)
                self.speed = 4; self.displayFx = 'A'
            elif(value.MX == 'B'):
                self.btnSpeed4.Check(True); self.btnDisplayFxBlinking.Check(True)
                self.speed = 4; self.displayFx = 'B'
            elif(value.MX == 'C'):
                self.btnSpeed4.Check(True); self.btnDisplayFxSong1.Check(True)
                self.speed = 4; self.displayFx = 'C'
            elif(value.MX == 'D'):
                self.btnSpeed4.Check(True); self.btnDisplayFxSong2.Check(True)
                self.speed = 4; self.displayFx = 'D'
            elif(value.MX == 'E'):
                self.btnSpeed4.Check(True); self.btnDisplayFxSong3.Check(True)
                self.speed = 4; self.displayFx = 'E'
            elif(value.MX == 'Q'):
                self.btnSpeed3.Check(True); self.btnDisplayFxNormal.Check(True)
                self.speed = 3; self.displayFx = 'A'
            elif(value.MX == 'R'):
                self.btnSpeed3.Check(True); self.btnDisplayFxBlinking.Check(True)
                self.speed = 3; self.displayFx = 'B'
            elif(value.MX == 'S'):
                self.btnSpeed3.Check(True); self.btnDisplayFxSong1.Check(True)
                self.speed = 3; self.displayFx = 'C'
            elif(value.MX == 'T'):
                self.btnSpeed3.Check(True); self.btnDisplayFxSong2.Check(True)
                self.speed = 3; self.displayFx = 'D'
            elif(value.MX == 'U'):
                self.btnSpeed3.Check(True); self.btnDisplayFxSong3.Check(True)
                self.speed = 3; self.displayFx = 'E'
            elif(value.MX == 'a'):
                self.btnSpeed2.Check(True); self.btnDisplayFxNormal.Check(True)
                self.speed = 2; self.displayFx = 'A'
            elif(value.MX == 'b'):
                self.btnSpeed2.Check(True); self.btnDisplayFxBlinking.Check(True)
                self.speed = 2; self.displayFx = 'B'
            elif(value.MX == 'c'):
                self.btnSpeed2.Check(True); self.btnDisplayFxSong1.Check(True)
                self.speed = 2; self.displayFx = 'C'
            elif(value.MX == 'd'):
                self.btnSpeed2.Check(True); self.btnDisplayFxSong2.Check(True)
                self.speed = 2; self.displayFx = 'D'
            elif(value.MX == 'e'):
                self.btnSpeed2.Check(True); self.btnDisplayFxSong3.Check(True)
                self.speed = 2; self.displayFx = 'E'
            elif(value.MX == 'q'):
                self.btnSpeed1.Check(True); self.btnDisplayFxNormal.Check(True)
                self.speed = 1; self.displayFx = 'A'
            elif(value.MX == 'r'):
                self.btnSpeed1.Check(True); self.btnDisplayFxBlinking.Check(True)
                self.speed = 1; self.displayFx = 'B'
            elif(value.MX == 's'):
                self.btnSpeed1.Check(True); self.btnDisplayFxSong1.Check(True)
                self.speed = 1; self.displayFx = 'C'
            elif(value.MX == 't'):
                self.btnSpeed1.Check(True); self.btnDisplayFxSong2.Check(True)
                self.speed = 1; self.displayFx = 'D'
            elif(value.MX == 'u'):
                self.btnSpeed1.Check(True); self.btnDisplayFxSong3.Check(True)
                self.speed = 1; self.displayFx = 'E'
            self.CalcDisplayMethod()

            self.laggingFx = value.FY
            self.DeselectClosingFx()
            if(value.FY == 'A'): self.btnClosingFxImmediate.Check(True)
            elif(value.FY == 'B'): self.btnClosingFxXopen.Check(True)
            elif(value.FY == 'C'): self.btnClosingFxCurtainUp.Check(True)
            elif(value.FY == 'D'): self.btnClosingFxCurtainDown.Check(True)
            elif(value.FY == 'E'): self.btnClosingFxScrollLeft.Check(True)
            elif(value.FY == 'F'): self.btnClosingFxScrollRight.Check(True)
            elif(value.FY == 'G'): self.btnClosingFxVopen.Check(True)
            elif(value.FY == 'H'): self.btnClosingFxVclose.Check(True)
            elif(value.FY == 'I'): self.btnClosingFxScrollUp.Check(True)
            elif(value.FY == 'J'): self.btnClosingFxScrollDown.Check(True)
            elif(value.FY == 'K'): self.btnClosingFxHold.Check(True)

    def OnCut(self, e):
        self.textField.Cut()

    def OnCopy(self, e):
        self.textField.Copy()

    def OnPaste(self, e):
        self.textField.Paste()

    def OnDelete(self, e):
        self.textField.WriteText("")

    def OnSendMessage(self, e):
        if(self.SetupConnection()):
            dlg = wx.TextEntryDialog(self, "Enter a raw command to send")
            if(dlg.ShowModal() != wx.ID_OK): return
            result = dlg.GetValue()
            if(result == ""):
                wx.MessageBox("Invalid input", "Error", wx.ICON_ERROR | wx.OK, self)
                return
            self.ld.send(result)

    def OnSetDefaultRunPage(self, e):
        if(self.SetupConnection()):
            dlg = wx.TextEntryDialog(self, "Enter a default run page (A..Z)")
            if(dlg.ShowModal() != wx.ID_OK): return
            result = dlg.GetValue()
            if(result not in self.PAGES):
                wx.MessageBox("Invalid input", "Error", wx.ICON_ERROR | wx.OK, self)
                return
            self.ld.send('<RP'+result+'>')

    def OnSetId(self, e):
        if(self.SetupConnection()):
            dlg = wx.TextEntryDialog(self, "Enter new ID (1..255)")
            if(dlg.ShowModal() != wx.ID_OK): return
            result = dlg.GetValue()
            self.ld.setid(newid=int(result))

    def OnSetClock(self, e):
        if(self.SetupConnection()):
            self.ld.setclock()

    def OnSetBrightness(self, e):
        if(self.SetupConnection()):
            dlg = wx.TextEntryDialog(self, "Enter brightness level (A..D)", self.PRODUCT_NAME, "A")
            if(dlg.ShowModal() != wx.ID_OK): return
            result = dlg.GetValue()
            if(result not in ["A", "B", "C", "D"]):
                wx.MessageBox("Invalid input", "Error", wx.ICON_ERROR | wx.OK, self)
                return
            self.ld.brightness(result)

    def OnSetSchedule(self, e):
        if(self.SetupConnection()):
            dlg = wx.TextEntryDialog(self, "Enter which schedule should be edited (e.g. A..E)", self.PRODUCT_NAME, "A")
            if(dlg.ShowModal() != wx.ID_OK): return
            schedule = dlg.GetValue()
            if(schedule not in ["A", "B", "C", "D", "E"]):
                wx.MessageBox("Invalid input", "Error", wx.ICON_ERROR | wx.OK, self)
                return

            dlg = wx.TextEntryDialog(self, "Enter which pages should be shown (e.g. ABDEF). Leave empty to disable this schedule.")
            if(dlg.ShowModal() != wx.ID_OK): return
            pages = dlg.GetValue()

            if(pages == ""):
                self.ld.updatesched(schedule, active=False)
            else:
                dlg = wx.TextEntryDialog(self, "Enter schedule start time (YYMMDDHHmm).", self.PRODUCT_NAME, "0001010000")
                if(dlg.ShowModal() != wx.ID_OK): return
                start = dlg.GetValue()

                dlg = wx.TextEntryDialog(self, "Enter schedule end time (YYMMDDHHmm).", self.PRODUCT_NAME, "9912302359")
                if(dlg.ShowModal() != wx.ID_OK): return
                end = dlg.GetValue()

                self.ld.updatesched(schedule, pages, active=True, start=start, end=end)

            self.ld.pushchanges()

    def OnFactoryReset(self, e):
        if(self.SetupConnection()):
            self.ld.send('<D*>')

    def OnInsertCmd(self, cmd, e):
        self.textField.WriteText(cmd)

    def OnSetDisplayTime(self, e):
        if(self.SetupConnection()):
            dlg = wx.TextEntryDialog(self, "Enter display (wait) time (A..Z)")
            if(dlg.ShowModal() != wx.ID_OK): return
            result = dlg.GetValue()
            if(result not in self.PAGES):
                wx.MessageBox("Invalid input", "Error", wx.ICON_ERROR | wx.OK, self)
                return
            self.waitTime = result

    def DeselectLeadingFx(self):
        self.btnLeadingFxImmediate.Check(False)
        self.btnLeadingFxXopen.Check(False)
        self.btnLeadingFxCurtainUp.Check(False)
        self.btnLeadingFxCurtainDown.Check(False)
        self.btnLeadingFxScrollLeft.Check(False)
        self.btnLeadingFxScrollRight.Check(False)
        self.btnLeadingFxVopen.Check(False)
        self.btnLeadingFxVclose.Check(False)
        self.btnLeadingFxScrollUp.Check(False)
        self.btnLeadingFxScrollDown.Check(False)
        self.btnLeadingFxHold.Check(False)
        self.btnLeadingFxSnow.Check(False)
        self.btnLeadingFxTwinkle.Check(False)
        self.btnLeadingFxBlockMove.Check(False)
        self.btnLeadingFxRandom.Check(False)

    def OnSetLeadingFx(self, fx, menuItem, e):
        self.DeselectLeadingFx()
        menuItem.Check(True)
        self.leadingFx = fx

    def DeselectSpeed(self):
        self.btnSpeed1.Check(False)
        self.btnSpeed2.Check(False)
        self.btnSpeed3.Check(False)
        self.btnSpeed4.Check(False)

    def OnSetSpeed(self, speed, menuItem, e):
        self.DeselectSpeed()
        menuItem.Check(True)
        self.speed = speed
        self.CalcDisplayMethod()

    def DeselectDisplayFx(self):
        self.btnDisplayFxNormal.Check(False)
        self.btnDisplayFxBlinking.Check(False)
        self.btnDisplayFxSong1.Check(False)
        self.btnDisplayFxSong2.Check(False)
        self.btnDisplayFxSong3.Check(False)

    def OnSetDisplayFx(self, fx, menuItem, e):
        self.DeselectDisplayFx()
        menuItem.Check(True)
        self.displayFx = fx
        self.CalcDisplayMethod()

    def CalcDisplayMethod(self):
        DISPLAY_METHOD_MATRIX = {
            1 : { "A":"A", "B":"B", "C":"C", "D":"D", "E":"E" },
            2 : { "A":"Q", "B":"R", "C":"S", "D":"T", "E":"U" },
            3 : { "A":"a", "B":"b", "C":"c", "D":"d", "E":"e" },
            4 : { "A":"q", "B":"r", "C":"s", "D":"t", "E":"u" },
        }
        self.displayMethod = "Q" # fallback to default
        if(self.speed in DISPLAY_METHOD_MATRIX and self.displayFx in DISPLAY_METHOD_MATRIX[self.speed]):
            self.displayMethod = DISPLAY_METHOD_MATRIX[self.speed][self.displayFx]

    def DeselectClosingFx(self):
        self.btnClosingFxImmediate.Check(False)
        self.btnClosingFxXopen.Check(False)
        self.btnClosingFxCurtainUp.Check(False)
        self.btnClosingFxCurtainDown.Check(False)
        self.btnClosingFxScrollLeft.Check(False)
        self.btnClosingFxScrollRight.Check(False)
        self.btnClosingFxVopen.Check(False)
        self.btnClosingFxVclose.Check(False)
        self.btnClosingFxScrollUp.Check(False)
        self.btnClosingFxScrollDown.Check(False)
        self.btnClosingFxHold.Check(False)

    def OnSetClosingFx(self, fx, menuItem, e):
        self.DeselectClosingFx()
        menuItem.Check(True)
        self.laggingFx = fx

    def SetupConnection(self, message=True):
        logging.getLogger().setLevel(logging.INFO)
        self.ld = sixleds.sixleds(dev=self.serialPort, conf=self.sixledsConfigFile, device=self.deviceId)
        if(self.ld.ser == None):
            if(message):
                wx.MessageBox("Cannot send data. Please check if serial port »"+self.serialPort+"« is correct and if you have privileges to use this port (add your user to group dialout via »usermod -a -G dialout USERNAME« and log in again).\n\nIf the error persists, please use the command line tool to examine the error.", "Connection Error", wx.ICON_ERROR | wx.OK, self)
            return False
        else:
            return True

    def OnSelectSerialPort(self, e):
        with wx.FileDialog(self,
            "Choose Serial Port", "/dev", wildcard="All Files *|*",
            style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST
        ) as fileDialog:
            if fileDialog.ShowModal() == wx.ID_CANCEL: return
            if(wx.MessageDialog(self, fileDialog.GetPath(), "Please confirm", wx.ICON_QUESTION | wx.YES_NO).ShowModal() == wx.ID_YES):
                self.serialPort = fileDialog.GetPath()
                self.SetupConnection()
                self.SetCustomTitle()

    def OnSendPage(self, e):
        if(self.SetupConnection()):
            self.ld.updateline(self.page, self.textField.GetValue(), self.line, self.leadingFx, self.displayMethod, self.waitTime, self.laggingFx)
            self.ld.pushchanges()

    def OnQuit(self, e):
        self.Close()


def main():
    app = wx.App()
    window = sixledsMainWindow(None)
    window.Show()
    app.MainLoop()

if __name__ == '__main__':
    main()
